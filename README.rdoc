= Synopsis

Download, merge and convert Amazon S3 log files for a specified date or date range.

* Download log files produced by Amazon S3 from Amazon S3 buckets
* Merge those log files together into a single logfile (sorting on ascending timestamp)
* Convert the Amazon Server Access Log Format to Apache Common Log Format

Ralf is an acronym for Retrieve Amazon Log Files. Ralf does the following things:

= Usage

  Usage: ./bin/ralf [options]

  Download and merge Amazon S3 bucket log files for a specified date range and
  output a Common Log File. Ralf is an acronym for Retrieve Amazon Log Files.

  Ralf downloads bucket log files to local cache directories, merges the Amazon Log
  Files and converts them to Common Log Format.

  Example: ./bin/ralf --range month --now yesterday --output-file '/var/log/amazon/:year/:month/:bucket.log'

  AWS credentials (Access Key Id and Secret Access Key) are required to access
  S3 buckets. For security reasons these credentials can only be specified in a
  configuration file (see --config-file) or through the environment using the
  AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.

  Log selection options:
      -l, --[no-]list                  List buckets that have logging enabled. Does not process log files.
      -b, --buckets x,y,z              Buckets for which to process log files. Defaults to all log-enabled buckets.
      -r, --range BEGIN[,END]          Date or date range to process. Defaults to 'today'.
      -t, --now TIME                   Date to use as base for range. Defaults to 'today'.

      You can use Chronic expressions for '--range' and '--now'. See http://chronic.rubyforge.org.
    
      Example: --range 'last week'
        All days of previous week.
      Example: --range 'this week'
        Beginning of this week (sunday) upto and including today.
      Example: --range '2010-01-01','2010-04-30'
        First four months of this year.
      Example: --range 'this month' --now yesterday
        This will select log files from the beginning of yesterday's month upto and including yesterday.

      The --buckets, --range and --now options are optional. If unspecified, (incomplete)
      logging for today will be processed for all buckets (that have logging enabled).
      This is equivalent to specifying "--range 'today'" and "--now 'today'".

  Output options:
      -o, --output-file FORMAT         Output file, e.g. '/var/log/s3/:year/:month/:bucket.log'. Required.

      The --output-file format uses the last day of the range specified by (--range)
      to determine the filename. E.g. when the format contains ':year/:month/:day' and
      the range is 2010-01-15..2010-02-14, then the output file will be '2010/02/14'.

      -x, --cache-dir FORMAT           Directory name(s) in which to cache downloaded log files. Optional.

      The --cache-dir format expands to as many directory names as needed for the 
      range specified by --range. E.g. "/var/run/s3_cache/:year/:month/:day/:bucket"
      expands to 31 directories for range 2010-01-01..2010-01-31.
    
      Defaults to '~/.ralf_cache/:bucket'.

  Config file options:
      -c, --config-file FILE           Path to file with configuration settings (in YAML format).

      Configuration settings are read from the (-c) specified configuration file
      or from ~/.ralf or from /etc/ralf (in that order, if the file exists).
      Command-line options override settings read from a configuration file.

      Configuration files must be in YAML format. Each command-line options has an
      equivalent setting in a configuration file replacing dash (-) by underscore(_).

      The Amazon Access Key Id and Secret Access Key can only be specified in the 

      Example:
        output_file:           /var/log/amazon_s3/:year:month/:bucket.log
        aws_access_key_id:     my_access_key_id
        aws_secret_access_key: my_secret_access_key

      Command-line options always override the options loaded from the configuration file.

  Debug options:
      -d, --[no-]debug [aws]           Show debug messages.

  Common options:
      -h, --help                       Show this message.
      -v, --version                    Show version.

= Library

You can also use Ralf from within your own ruby code.

  require 'rubygems'
  require 'ralf'
  r = Ralf.new(
    :config => '/my/config.yaml',
    :output_dir_format => ':year/:month/:day',
    :rename_bucket_keys => true,
    :range => 'yesterday'
  )
  r.run

Or run it in one go:

  require 'rubygems'
  require 'ralf'
  Ralf.run(:config => '/my/config.yaml', :range => '2010-02-01', :output_dir_format => ':year/:month/:day')

= Requirements

* Credentials for an Amazon S3 account
* Enable logging on S3
  You can use Cyberduck[http://cyberduck.ch/] for example.

= Dependencies

* chronic
* right_aws
* logmerge

== Parameters:

    config:   a YAML config file, if none given it tries to open /etc/ralf.yaml or ~/.ralf.yaml
    range:    a specific range as a string <start> (which creates a range to now) or array: [<start>] _or_ [<start>,<stop>]
              (examples: 'today'; 'yesterday'; 'january'; ['2 days ago', 'yesterday']; )

    aws_access_key_id:      (required in config)
    aws_secret_access_key:  (required in config)
    out_path:               (required in config)
    output_prefix:             (optional, defaults to 's3_combined') Prefix the output file
    output_dir_format:          (optional, defaults to '') specify directory separators (e.g. ':year/:month/:day')
    rename_bucket_keys:     (boolean, optional) organize asset on S3 in the same structure as :output_dir_format 
                            (WARNING: there is an extra performance and cost penalty)
    log_file:               (optional, defaults to '/var/log/ralf.log') Logging of ralf actions.

You can ommit a configuration file when you supply the required parameters __:aws\_access\_key\_id___, __:aws\_secret\_access\_key__ and __:out\_path__  
They take precedence over the config file

== Caveats

* There is no logrotation as we know it like on regular unix machines

More info: {S3 Server Access Logging}[http://docs.amazonwebservices.com/AmazonS3/latest/ServerLogs.html]

== TODO

* Grouping/combinig on week/month
* Give a date range c.q. a month
* Option to archive/compress original logs

= Authors
Authors: {Leon Berenschot}[http://github.com/LeipeLeon] and {K.J. Wierenga}[http://github.com/kjwierenga]

This program is used for {kerkdienstgemist.nl}[http://kerkdienstgemist.nl] {Amazon S3}[http://aws.amazon.com/s3/] log file processing.
