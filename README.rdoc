= Synopsis

Download, merge and convert Amazon S3 log files for a specified date or date range.

* Download log files produced by Amazon S3 from Amazon S3 buckets
* Merge those log files together into a single logfile (sorting on ascending timestamp)
* Convert the Amazon Server Access Log Format to Apache Common Log Format

Ralf is an acronym for Retrieve Amazon Log Files. Ralf does the following things:

= Usage

  Usage: ./bin/ralf [options]

  Download, merge and convert Amazon S3 log files for a specified date or date range.

  ralf reads options from '~/.ralf.yaml' or '/etc/ralf.yaml'. These files must be in YAML format.

  Example:
    out_path:          /var/log/amazon_s3
    log_file:          /var/log/ralf.log
    aws_access_key_id: my_secret_key_id

  Command line options override the options loaded from the configuration file.

  Specific options:
      -r, --range BEGIN[,END]          Date or date range to process. Supports Chronic expressions (http://chronic.rubyforge.org)

  Output options:
      -f, --output-dir-format FORMAT   Output directory format, e.g. ':year/:month/:day'
      -d, --output-basedir DIR         Base directory for output files
      -p, --output-prefix STRING       Prefix string for output files

  Amazon options:
      -a AWS_ACCESS_KEY_ID             AWS Access Key Id
          --aws-access-key-id
      -s AWS_SECRET_ACCESS_KEY         AWS Secret Access Key
          --aws-secret-access-key
      -m, --[no-]rename-originals      Rename original log files on Amazon using '--output-dir-format' option

  Config file options:
      -c, --config FILE                Path to configuration file (.yaml)

  Log options:
      -l, --log-file FILE              Path to log file

  Common options:
      -h, --help                       Show this message
          --version                    Show version

= Library

You can also use Ralf from within your own ruby code.

  require 'rubygems'
  require 'ralf'
  r = Ralf.new(
    :config => '/my/config.yaml',
    :out_separator => ':year/:month/:day',
    :rename_bucket_keys => true,
    :range => 'yesterday'
  )
  r.run

Or run it in one go:

  require 'rubygems'
  require 'ralf'
  Ralf.run(:config => '/my/config.yaml', :range => '2010-02-01', :out_separator => ':year/:month/:day')

= Requirements

* Credentials for an Amazon S3 account
* Enable logging on S3
  You can use Cyberduck[http://cyberduck.ch/] for example.

= Dependencies

* chronic
* right_aws
* logmerge

== Parameters:

    config:   a YAML config file, if none given it tries to open /etc/ralf.yaml or ~/.ralf.yaml
    range:    a specific range as a string <start> (which creates a range to now) or array: [<start>] _or_ [<start>,<stop>]
              (examples: 'today'; 'yesterday'; 'january'; ['2 days ago', 'yesterday']; )

    aws_access_key_id:      (required in config)
    aws_secret_access_key:  (required in config)
    out_path:               (required in config)
    output_prefix:             (optional, defaults to 's3_combined') Prefix the output file
    out_separator:          (optional, defaults to '') specify directory separators (e.g. ':year/:month/:day')
    rename_bucket_keys:     (boolean, optional) organize asset on S3 in the same structure as :out_separator 
                            (WARNING: there is an extra performance and cost penalty)
    log_file:               (optional, defaults to '/var/log/ralf.log') Logging of ralf actions.

You can ommit a configuration file when you supply the required parameters __:aws\_access\_key\_id___, __:aws\_secret\_access\_key__ and __:out\_path__  
They take precedence over the config file

== Caveats

* There is no logrotation as we know it like on regular unix machines

More info: {S3 Server Access Logging}[http://docs.amazonwebservices.com/AmazonS3/latest/ServerLogs.html]

== TODO

* Grouping/combinig on week/month
* Give a date range c.q. a month
* Option to archive/compress original logs

= Authors
Authors: {Leon Berenschot}[http://github.com/LeipeLeon] and {K.J. Wierenga}[http://github.com/kjwierenga]

This program is used for {kerkdienstgemist.nl}[http://kerkdienstgemist.nl] {Amazon S3}[http://aws.amazon.com/s3/] log file processing.
